import ballerina/log;
import ballerina/http;
import ballerina/swagger;
import wso2/gateway;

endpoint http:Client {{qualifiedServiceName}}_EP {
    url: "{{endpointConfig.prodEndpoints.0.endpointUrl}}"
};


@swagger:ServiceInfo { {{#info}}
    title: "{{title}}"{{#description}},
    description: "{{description}}"{{/description}},
    serviceVersion: "{{version}}"{{#termsOfService}},
    termsOfService: "{{termsOfService}}"{{/termsOfService}}{{#contact}},
    contact: {name: "{{contact.name}}", email: "{{contact.email}}", url: "{{contact.url}}"}{{/contact}}{{#license}},
    license: {name: "{{license.name}}", url: "{{license.url}}"}{{/license}}{{/info}}{{#if tags}},
    tags: [{{#tags}}
        {name: "{{name}}", description: "{{description}}", {{=<% %>=}}externalDocs: <%>doc%><%={{ }}=%>}{{#unless @last}},{{/unless}}{{/tags}}
    ]{{/if}}{{#if externalDocs}},
    externalDocs: {{>doc}}{{/if}}{{#if security}},
    security: [{{#security}}
        {{>security}}{{/security}}
    ]{{/if}}
}

@http:ServiceConfig {
    basePath: "{{api.context}}/{{api.version}}",{{!-- {{only one base path is allowed for all endpoints}} --}}
    authConfig:{
        authProviders:["oauth2"],
        authentication:{enabled:true}
    }
}

@gateway:Version { apiVersion: "{{api.version}}" }
service<http:Service> {{cut qualifiedServiceName " "}} bind apiListener,apiSecureListener {
{{#paths}}{{#value}}{{#operations}}{{#value}}
    @swagger:ResourceInfo {
        summary: "{{summary}}"{{#if tags}},
        tags: [{{#tags}}"{{.}}"{{#unless @last}},{{/unless}}{{/tags}}]{{/if}}{{#if description}},
        description: "{{description}}"{{/if}}{{#if externalDocs}},
        externalDocs: {{>doc}}{{/if}}{{#if parameters}},
        parameters: [{{#parameters}}
            {
                name: "{{name}}",
                inInfo: "{{in}}",
                description: "{{description}}", {{#required}}
                required: {{required}},{{/required}} {{#deprecated}}
                discontinued: {{deprecated}},{{/deprecated}}
                allowEmptyValue: "{{allowEmptyValue}}"
            }{{#unless @last}},{{/unless}}{{/parameters}}
        ]{{/if}}
    }
    @http:ResourceConfig {
        methods:["{{upper key}}"],
        path:"{{../../key}}",
        authConfig:{
            authProviders:["oauth2"],
            authentication:{enabled:true}
        }
    }
    @gateway:RateLimit{policy : "{{resourceTier}}"}
    {{operationId}} (endpoint outboundEp, http:Request req) {
    
    string urlPostfix = untaint req.rawPath.replace("{{api.context}}/{{api.version}}","");
    var clientResponse = {{qualifiedServiceName}}_EP->forward(urlPostfix, req);

        match clientResponse {

            http:Response res => {
                outboundEp->respond(res) but { error e =>
                log:printError("Error sending response", err = e) };
            }

            error err => {
                http:Response res = new;
                res.statusCode = 500;
                res.setPayload(err.message);
                outboundEp->respond(res) but { error e =>
                log:printError("Error sending response", err = e) };
            }
        }
    }
{{/value}}{{/operations}}{{/value}}{{/paths}}
}